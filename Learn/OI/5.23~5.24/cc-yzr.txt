1. April Cook-Off 2018 PWNCHESS
题意：输入一个只包含'W','B','.'的字符串，'W'是白卒，'B'是黑卒。白卒每次可以向右移动一格，要求不能移到棋盘外，如果移到的那个位置是白卒则不合法，移到的位置是黑卒则把它吃掉。黑卒只能向左移，规则类似。两人轮流操作，当某一方没棋子可动则GG。显然不会出现某个棋子移到棋盘外的情况，因为这样会和对方的所有棋子相遇。保证白卒左侧的卒都是白卒。n<=128,sigma{n}<=5e5
题解：我们考虑双方的最靠近对方阵地的卒（先锋）。
Case 1：初始状态两卒dis>=2.显然双方一开始会不断扩大自己的领地，到了dis=2时便尽量不再移动，因为被吃掉显然不优。此时可以通过模拟来判断胜负
Case 2：初始有两卒贴在一起。问题就很复杂了QAQ
有个很显然的想法是大力讨论，如果先手吃掉对方后不被吃显然要吃过去；如果先手无法通过移动自己的棋子（非先锋）到先锋后面也吃过去，因为否则就白白浪费一颗子了……
等等，第二句话好像是错的！
反例：W..WW.WW..WBB.BB.B
因为这种情况比较复杂，可能弃子更优。在这种情况下显然对手下一步会吃过来
我们换个思路，考虑暴力。显然如果先手不吃对方，一定会移动第2前面的棋子，转移数<=2。
可以保留正确的结论作为剪枝：如果先手吃掉对方后不被吃显然要吃过去。
递归地边界――如果出现WWBB则产生另一种对峙局面，可以O(n)扫一遍算答案；如果dis>=2则应用Case1的解法。
如果没有到达边界情况，显然至多2步会使得原串和“WWBB”的匹配+1，因此至多递归4层。
复杂度（或许）是O(T*n*16)，但CC上只要跑0.01s，所有复杂度很可能是不到这个的。
[UPD 5.24]后来仔细分析了一下，可以讨论所有可能的情况，发现至多递归2层。其实搜索的本质就是在讨论不清楚的时候偷懒

一道判断题：如果先手不吃过去，后手下一回合会吃回来。F！反例：WWBB
不过，这个结论是对的“如果先手不吃过去，最优策略中先手一直不会吃这个棋子（吃了就GG）”。原因是如果现在不吃以后吃不如现在吃。
（1）也就是说如果当前先手不吃，这个棋子就是送个对手的，对对手而言可以把这个棋子看成“平地”，直接删掉。
（2）如果吃下去，那么下一步如果对手不能吃回来就得到Case 1，如果对手能吃回来那么一定会吃回来（因为它不会再被先手吃掉），这也会到达Case 1。
这样讨论很方便！O(T*n)

2.May Challenge 2018 Division 1 Edges in Spanning Trees
题意：给定相同点集上的两棵生成树 T1 和 T2，节点编号为 1 ~ N。对于 T1 中的每条边 e1，你需要求在 T2 中有多少条边 e2 满足：T1 - e1 + e2（从 T1 中删去 e1 再加上 e2 构成的图）是一棵生成树；T2 - e2 + e1 也是一棵生成树. n<=1e5
题解：对于一条边e1，e2合法当且仅当e2在"e1两端在T2上得到的链"上 && e2在T1上两个端点分别在e1分出来的两个不同块中。一个暴力的想法是对T2树剖，需要做静态三维数点，询问数nlogn，因此总复杂度O(n*log^3 n)。还可以对T2可持久化，维护每个点到root的信息，可能需要主席树套主席树，这样询问数O(n)，时间/空间复杂度O(n*log^2 n)
考虑e2对每条e1的答案的影响，可以差分打标记实现，这样T1中每个子树的标记和表示对这条边目前合法的e2集合。子树标记和可以dfs处理（类似NOIP2016）。另一个条件是e1在T2上得到一条链，而e2在这条链上。链求和可以树上前缀和，即统计T2中每个点到root的链上的合法边数。具体做法是在T1上dfs，统计每个子树的差分标记和；T2的每个点维护它到root的路径上目前有几条边（目前dfs到的标记边），每次遇到一个标记（边e2）则在T2上子树加。统计每条边的答案是求变化量，每次求状态实际上就是val[u]+val[v]-2*val[lca]，val用BIT维护（当然实际不是这样写的）。这样就O(nlogn)了！

3.May Challenge 2018 Division 1 Series Sum
##题意:
You are given $N$ integers $a_1, a_2, \dots, a_N$. Let's define functions $f$ and $g$:
$f(x, k) = (x + a_1)^k + (x + a_2)^k + \dots + (x + a_N)^k$
$g(t, k) = f(0, k) + f(1, k) + \dots + f(t, k)$
You are also given integers $T$ and $K$. Calculate $g(T, i)$ modulo $10^9 + 7$ for each $i$ between $0$ and $K$ inclusive.
$n<=1e5, k<=5e4, T<=1e18, ai<1e9+7$
##题解：

把$g(t,k)$ 的式子二维展开，考虑二项式定理，$g(t,k)=\sum_{0<=i<=k} C(k,i)*S(i)*A(k-i)$，其中$S(i)=\sum_{0<=x<=n} x^i$，$A(k)=\sum_{i=1}^n a_i^k$。只要求出$S(i),A(i)$即可。

1.求自然数幂和
$\sum_{i=1}^n (1+i)^k - \sum_{i=1}^n i^k=(n+1)^k-1$
$=\sum_{i=1}^n \sum_{j=0}^{k-1} C(k,j)*i^j = \sum_{j=0}^{k-1} C(k,j) * S(j) = \sum_j \frac{k!}{j!*(k-j)!}*S(j) $

把$k!$除过去，得到$\sum_{0<=j<k} {\frac{S(j)}{j!} * \frac{1}{(k-j)!}} = \frac{(n+1)^k-1}{k!}$
可以看出是多项式求逆的形式，这样就求出了$S(j)$
令$A(x)=\frac{1}{x!}, B(x)=\frac{(n+1)^x-1}{x!}$，发现$A(0)=0$，不能求逆。注意到$B(0)=0$，而$A(1)>0$，因此可以将$A(x), B(x)$向右平移一，这样就可以做了，最后的$S(j)$位置不用动。

2.求$A(k)$
牛顿恒等式
$F(x)=\prod_{1<=i<=n} (x-a_i) =\sum_{0<=i<=n} b_{n-i}*x^i$
则$b_0*a_k+b_1*a_{k-1}+...+b_{k-1}*a_1+k*b_k = 0 (1<=k<=n)$
证明？ 大概是展开一下，得到$a_1^{b_1}*a_2^{b_2}*...$其中$\sum_i{b_i}=k$，且$b_i>1$的项至多一个（因为只能来源于$a_i$）。考虑$max(b_i)>1$时，它在$a_i$中次数为$b_i or b_i-1$，而在其他指数都一样的情况下，两者符号抵消。如果$max(b_i)=1$，则它在$a_i$中的来源是不明确的，即有$k$种可能，而符号为$b_{k-1}$的符号，显然与${b_k*k}$和为0

$b(x)$可以分治fft求出。
$a(x)$可以分治fft/多项式求逆（补一项$a_0=0$，对$b(x)$求逆）

然后就很方便了,$g(t,k)$的式子是一个卷积。
$ mod 1e9+7 $ ?








